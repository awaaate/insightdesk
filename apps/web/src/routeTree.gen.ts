/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard.index'
import { Route as DashboardProcessingRouteImport } from './routes/dashboard.processing'
import { Route as DashboardCommentsRouteImport } from './routes/dashboard.comments'
import { Route as DashboardAgentLogsRouteImport } from './routes/dashboard.agent-logs'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProcessingRoute = DashboardProcessingRouteImport.update({
  id: '/processing',
  path: '/processing',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCommentsRoute = DashboardCommentsRouteImport.update({
  id: '/comments',
  path: '/comments',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAgentLogsRoute = DashboardAgentLogsRouteImport.update({
  id: '/agent-logs',
  path: '/agent-logs',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/agent-logs': typeof DashboardAgentLogsRoute
  '/dashboard/comments': typeof DashboardCommentsRoute
  '/dashboard/processing': typeof DashboardProcessingRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/agent-logs': typeof DashboardAgentLogsRoute
  '/dashboard/comments': typeof DashboardCommentsRoute
  '/dashboard/processing': typeof DashboardProcessingRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/agent-logs': typeof DashboardAgentLogsRoute
  '/dashboard/comments': typeof DashboardCommentsRoute
  '/dashboard/processing': typeof DashboardProcessingRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/agent-logs'
    | '/dashboard/comments'
    | '/dashboard/processing'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/agent-logs'
    | '/dashboard/comments'
    | '/dashboard/processing'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/agent-logs'
    | '/dashboard/comments'
    | '/dashboard/processing'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/processing': {
      id: '/dashboard/processing'
      path: '/processing'
      fullPath: '/dashboard/processing'
      preLoaderRoute: typeof DashboardProcessingRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/comments': {
      id: '/dashboard/comments'
      path: '/comments'
      fullPath: '/dashboard/comments'
      preLoaderRoute: typeof DashboardCommentsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/agent-logs': {
      id: '/dashboard/agent-logs'
      path: '/agent-logs'
      fullPath: '/dashboard/agent-logs'
      preLoaderRoute: typeof DashboardAgentLogsRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardAgentLogsRoute: typeof DashboardAgentLogsRoute
  DashboardCommentsRoute: typeof DashboardCommentsRoute
  DashboardProcessingRoute: typeof DashboardProcessingRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAgentLogsRoute: DashboardAgentLogsRoute,
  DashboardCommentsRoute: DashboardCommentsRoute,
  DashboardProcessingRoute: DashboardProcessingRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
